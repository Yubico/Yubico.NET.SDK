# Copyright 2021 Yubico AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build

# Triggers build on pushes to the main and develop branches.
on:
  push:
    branches:
      - 'main'
      - 'develop'
    paths:
      - '**.h'
      - '**.c'
      - '**.cs'
      - '**.csproj'
      - '**.sln'
      - '.github/workflows/build.yml'

  workflow_dispatch:
    inputs:
      push-to-dev:
        description: 'Push to internal NuGet'
        required: false
        default: false
        type: boolean
      push-to-docs:
        description: 'Push docs to internal GCP'
        required: false
        default: false
        type: boolean
      version:
        description: 'Version'
        required: false
        default: "0.0.0-prerelease.YYYYMMDD.B"
        type: string
  schedule:
    - cron: '0 0 * * *' # Every day at midnight

jobs:
  run-tests:
    name: Run tests
    permissions:
      checks: write
      contents: read
      packages: read
      pull-requests: write
    uses: ./.github/workflows/test.yml
    with:
      build-coverage-report: false

  build-artifacts:
    name: Build artifacts
    runs-on: windows-2022
    needs: run-tests
    permissions:
      id-token: write
      contents: read
      packages: read
      attestations: write
    steps:
      # Checkout the local repository
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          global-json-file: "./global.json"
      - name: Add local NuGet repository
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Yubico/index.json"

      - name: Modify version for internal builds
        if: ${{ github.event.inputs.push-to-dev == 'true' }}
        run: |
          $file = gci ./build/Versions.props
          $versionProp = [xml](gc $file.FullName)
          $versionProp.Project.PropertyGroup.YubicoCoreVersion = "${{ github.event.inputs.version }}"
          $versionProp.Project.PropertyGroup.YubicoYubiKeyVersion = "${{ github.event.inputs.version }}"
          $versionProp.Save($file.FullName)

      # Build the project
      - name: Build Yubico.NET.SDK.sln
        run: dotnet pack --configuration Release --nologo --verbosity minimal Yubico.NET.SDK.sln

      # Build the documentation
      - name: Build docs
        run: |
          dotnet tool install --global docfx --version "2.*"
          docfx docfx.json --logLevel warning --log docfx.log --warningsAsErrors

      # Upload documentation log
      - name: "Save build artifacts: Docs log"
        uses: actions/upload-artifact@v4
        with:
          name: Documentation log
          path: docfx.log
          if-no-files-found: error

      # Upload documentation
      - name: "Save build artifacts: Docs"
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: docs/_site/
          if-no-files-found: error
          
      # Upload NuGet packages
      - name: "Save build artifacts: Nuget Packages"
        uses: actions/upload-artifact@v4
        with:
          name: Nuget Packages
          path: |
            Yubico.Core/src/bin/Release/*.nupkg
            Yubico.YubiKey/src/bin/Release/*.nupkg
          if-no-files-found: error
      
      # Upload symbols
      - name: "Save build artifacts: Symbols Packages"
        uses: actions/upload-artifact@v4
        with:
          name: Symbols Packages
          path: |
            Yubico.Core/src/bin/Release/*.snupkg
            Yubico.YubiKey/src/bin/Release/*.snupkg
          if-no-files-found: error
      
      # Upload assemblies
      - name: "Save build artifacts: Assemblies"
        uses: actions/upload-artifact@v4
        with:
          name: Assemblies
          path: |
            Yubico.Core/src/bin/Release/**/*.dll
            Yubico.YubiKey/src/bin/Release/**/*.dll
          if-no-files-found: error
      
      # Generate artifact attestation
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            Yubico.Core/src/bin/Release/*.nupkg
            Yubico.YubiKey/src/bin/Release/*.nupkg
            Yubico.Core/src/bin/Release/*.snupkg
            Yubico.YubiKey/src/bin/Release/*.snupkg
            Yubico.Core/src/bin/Release/**/*.dll
            Yubico.YubiKey/src/bin/Release/**/*.dll
      
  upload-docs:
    name: Upload docs
    if: ${{ github.event.inputs.push-to-docs == 'true' }}
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/upload-docs.yml
    needs: build-artifacts

  publish-internal:
    name: Publish to internal NuGet
    runs-on: windows-2022
    needs: build-artifacts
    if: ${{ github.event.inputs.push-to-dev == 'true' }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/download-artifact@v4
        id: download
        with:
          name: Nuget Packages
      - run: |
          $core = (Get-ChildItem -Recurse Yubico.Core/*.nupkg)[0].FullName
          $yubikey = (Get-ChildItem -Recurse Yubico.YubiKey/*.nupkg)[0].FullName
          dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Yubico/index.json"
          dotnet nuget push $core --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
          dotnet nuget push $yubikey --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    name: Build summary
    runs-on: ubuntu-latest
    needs: [build-artifacts, publish-internal, upload-docs] # Add upload-docs to needs
    if: always() # Run this job even if other jobs fail
    steps:
      - name: Generate build summary
        env:
          # Pass job results and outputs into the step's environment
          RUN_TESTS_RESULT: ${{ needs.run-tests.result }}
          BUILD_ARTIFACTS_RESULT: ${{ needs.build-artifacts.result }}
          UPLOAD_DOCS_RESULT: ${{ needs.upload-docs.result }}
          PUBLISH_INTERNAL_RESULT: ${{ needs.publish-internal.result }}
          DOCS_IMAGE_TAG: ${{ needs.upload-docs.outputs.image-tag }}
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Run tests | **${{ env.RUN_TESTS_RESULT }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Build artifacts | **${{ env.BUILD_ARTIFACTS_RESULT }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Upload docs | **${{ env.UPLOAD_DOCS_RESULT }}** |" >> $GITHUB_STEP_SUMMARY
          echo "| Publish to internal NuGet | **${{ env.PUBLISH_INTERNAL_RESULT }}** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Built Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Links to artifacts produced by this build run:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Documentation log](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/Documentation_log)" >> $GITHUB_STEP_SUMMARY
          echo "- [Documentation Site](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/Documentation)" >> $GITHUB_STEP_SUMMARY
          echo "- [Nuget Packages](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/Nuget_Packages)" >> $GITHUB_STEP_SUMMARY
          echo "- [Symbols Packages](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/Symbols_Packages)" >> $GITHUB_STEP_SUMMARY
          echo "- [Assemblies](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/Assemblies)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Conditionally add the Docker image tag to the summary if the upload-docs job was successful
          if [ "${{ env.UPLOAD_DOCS_RESULT }}" == "success" ]; then
            echo "### Documentation Docker Image" >> $GITHUB_STEP_SUMMARY
            echo "A new documentation Docker image was pushed with the tag:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "${{ env.DOCS_IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi