// Copyright 2021 Yubico AB
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Globalization;
using Yubico.Core.Iso7816;

namespace Yubico.YubiKey.Piv.Commands
{
    /// <summary>
    /// Build an attestation statement for a private key in a specified slot.
    /// </summary>
    /// <remarks>
    /// An attestation statement is an X.509 certificate. It verifies that a
    /// private key has been generated by the YubiKey. If the private key in a
    /// slot was imported, this command will not work.
    /// <para>
    /// The create attestation statement command is available on YubiKey version
    /// 4.3 and later.
    /// </para>
    /// <para>
    /// The partner Response class is <see cref="CreateAttestationStatementResponse"/>.
    /// </para>
    /// <para>
    /// It is possible to build attestation statements for keys in slots <c>9A</c>,
    /// <c>9C</c>, <c>9D</c>, <c>9E</c>, and <c>82</c> through <c>95</c>. The
    /// certificate created will contain the public key partner to the private
    /// key in the cert, along with the YubiKey's serial number. The cert will be
    /// signed by the attestation key, the private key in slot <c>F9</c>.
    /// </para>
    /// <para>
    /// Example:
    /// </para>
    /// <code language="csharp">
    ///   using System.Security.Cryptography.X509Certificates;<br/>
    ///   IYubiKeyConnection connection = key.Connect(YubiKeyApplication.Piv);<br/>
    ///   var createAttestationStatementCommand = new CreateAttestationStatementCommand (0x9A);
    ///   CreateAttestationStatementResponse createAttestationStatementResponse =
    ///       connection.SendCommand(createAttestationStatementCommand);<br/>
    ///   if (createAttestationStatementResponse.Status != ResponseStatus.Success)
    ///   {
    ///     // Handle error
    ///   }
    ///   X509Certificate2 attestationStatement = createAttestationStatementResponse.GetData();
    /// </code>
    /// </remarks>
    public sealed class CreateAttestationStatementCommand : IYubiKeyCommand<CreateAttestationStatementResponse>
    {
        private const byte AttestInstruction = 0xF9;

        // This is needed so we can make the check on the set of the property.
        private byte _slotNumber;

        /// <summary>
        /// The slot holding the key to be attested.
        /// </summary>
        /// <value>
        /// The slot number, see <see cref="PivSlot"/>
        /// </value>
        /// <exception cref="ArgumentException">
        /// The slot specified is not valid for attestation.
        /// </exception>
        public byte SlotNumber
        {
            get => _slotNumber;
            set
            {
                if (PivSlot.IsValidSlotNumberForSigning(value) == false)
                {
                    throw new ArgumentException(
                        string.Format(
                            CultureInfo.CurrentCulture,
                            ExceptionMessages.InvalidSlot,
                            value));
                }
                _slotNumber = value;
            }
        }

        /// <summary>
        /// Gets the YubiKeyApplication to which this command belongs. For this
        /// command, it's PIV.
        /// </summary>
        /// <value>
        /// YubiKeyApplication.Piv
        /// </value>
        public YubiKeyApplication Application => YubiKeyApplication.Piv;

        /// <summary>
        /// Initializes a new instance of the CreateAttestationStatementCommand class.
        /// This command takes the slot number as input.
        /// </summary>
        /// <remarks>
        /// The slot number must be either <c>0x9A</c>, <c>0x9C</c>, <c>0x9D</c>,
        /// <c>0x9E</c>, or <c>82</c> through <c>95</c>. These are the slots named,
        /// <c>PivSlot.Authentication</c>, <c>PivSlot.Signing</c>,
        /// <c>PivSlot.KeyManagement</c>, <c>PivSlot.CardAuthentication</c>, and
        /// <c>PivSlot.Retired1</c> through <c>PivSlot.Retired20</c>
        /// <para>
        /// If the slot specified does not have a private key, the YubiKey will
        /// not build a certificate and return an error StatusWord.
        /// </para>
        /// </remarks>
        /// <param name="slotNumber">
        /// The slot number containing the key to attest.
        /// </param>
        public CreateAttestationStatementCommand(byte slotNumber)
        {
            SlotNumber = slotNumber;
        }

        /// <summary>
        /// Initializes a new instance of the <c>CreateAttestationStatementCommand</c>
        /// class.
        /// </summary>
        /// <remarks>
        /// This constructor is provided for those developers who want to use the
        /// object initializer pattern. For example:
        /// <code language="csharp">
        ///   var command = new CreateAttestationStatementCommand()
        ///   {
        ///       SlotNumber = PivSlot.Signing,
        ///   };
        /// </code>
        /// <para>
        /// There is no default slot number, hence, for this command to be valid,
        /// the slot number must be specified. So if you create an object using
        /// this constructor, you must set the SlotNumber property at some time
        /// before using it. Otherwise you will get an exception when you do use
        /// it.
        /// </para>
        /// </remarks>
        public CreateAttestationStatementCommand()
        {
            _slotNumber = 0;
        }

        /// <inheritdoc />
        /// <exception cref="InvalidOperationException">
        /// The slot specified is not valid for attestation.
        /// </exception>
        public CommandApdu CreateCommandApdu()
        {
            if (PivSlot.IsValidSlotNumberForSigning(_slotNumber) == false)
            {
                throw new InvalidOperationException(
                    string.Format(
                        CultureInfo.CurrentCulture,
                        ExceptionMessages.InvalidSlot,
                        _slotNumber));
            }

            return new CommandApdu()
            {
                Ins = AttestInstruction,
                P1 = SlotNumber,
            };
        }

        /// <inheritdoc />
        public CreateAttestationStatementResponse CreateResponseForApdu(ResponseApdu responseApdu) =>
            new CreateAttestationStatementResponse(responseApdu);
    }
}
