// Copyright 2021 Yubico AB
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Security.Cryptography.X509Certificates;
using Xunit;
using Yubico.Core.Tlv;
using Yubico.YubiKey.TestUtilities;

namespace Yubico.YubiKey.Piv
{
    [Trait("Category", "Simple")]
    public class ImportTests
    {
        [Theory]
        // [InlineData(PivAlgorithm.Rsa1024, 0x86, StandardTestDevice.Fw5)]
        // [InlineData(PivAlgorithm.Rsa2048, 0x9a, StandardTestDevice.Fw5)]
        [InlineData(PivAlgorithm.Rsa3072, 0x90, StandardTestDevice.Fw5)]
        [InlineData(PivAlgorithm.Rsa4096, 0x91, StandardTestDevice.Fw5)]
        // [InlineData(PivAlgorithm.EccP256, 0x88, StandardTestDevice.Fw5)]
        // [InlineData(PivAlgorithm.EccP384, 0x89, StandardTestDevice.Fw5)]
        public void SimpleImport(PivAlgorithm algorithm, byte slotNumber, StandardTestDevice testDeviceType)
        {
            var tlv = new TlvWriter();
            tlv.WriteValue(0x1, new byte[]
            {
                0xfd,0x7e,0x54,0x4c,0x7c,0x12,0x72,0x13,0xba,0x4c,0xe0,0x80,0xcf,0xad,
                0x8f,0xa2,0x0d,0x1f,0xd8,0xc2,0x8c,0xb9,0x31,0x78,0x31,0xfd,0x7f,0xfc,0x7b,
                0x68,0x6b,0xd0,0xae,0xb6,0x8d,0x71,0x94,0x55,0xd1,0x7e,0x72,0xf7,0x83,0x8b,
                0xaa,0xc9,0x14,0x6a,0xec,0x9c,0xa5,0x11,0x3b,0x30,0x34,0x8a,0xe4,0x40,0xc9,
                0x30,0x28,0x98,0x27,0x40,0x34,0xde,0x52,0x1e,0x18,0xe2,0xc9,0x6a,0x9e,0xff,
                0xf8,0x8d,0x0f,0x19,0xb7,0x3f,0xf4,0x41,0xa6,0x66,0xcf,0x52,0x33,0x2c,0x2b,
                0x74,0x7f,0x97,0xfd,0xe2,0x56,0xf1,0x9c,0x7a,0xe9,0x67,0x0d,0xc5,0x98,0xa3,
                0x43,0xaf,0x9f,0x83,0xb0,0x06,0xa4,0x28,0xb1,0x35,0x3e,0x75,0x3c,0x85,0x67,
                0x72,0x2a,0x13,0x76,0x36,0x77,0xd3,0x44,0x22,0xb6,0xec,0xa1,0xb5,0xde,0x76,
                0x56,0x8d,0xbc,0x02,0xfc,0xdc,0x74,0xf7,0x19,0xc9,0x18,0x1c,0xe8,0x8d,0x8a,
                0xa3,0x88,0xb9,0xa0,0x82,0x50,0x26,0xc2,0x3a,0x65,0x12,0xb2,0x82,0xa1,0xe6,
                0x44,0xc1,0xf6,0x88,0xd9,0x06,0xc5,0x8b,0x10,0x54,0x19,0x61,0xee,0x38,0xee,
                0x43,0x71,0x69,0xc6,0x3f,0x0f,0x66,0x3f,0x67,0x8e,0x7c,0xf8,0x67,0x56,0xfb,
                0x32,0x2c,0x05,0x54,0xdd,0x66,0x0a,0xc1,0xd7,0xdc,0x8c,0x13,0x4a,0xd7,0xf8,
                0xf9,0xbc,0xac,0xd8,0x0b,0xd3,0x00,0x4e,0xbd,0x03,0x06,0xd6,0x28,0xc9,0xed,
                0x07,0xad,0x74,0x1b,0x2a,0x0d,0x91,0x0f,0xc1,0xc7,0xa0,0xad,0x29,0xca,0x6c,
                0xd7,0xf9,0xd8,0xcf,0x5f,0x9e,0xac,0x16,0xb7,0x04,0x68,0x04,0x8a,0x67,0xb3,
                0x5d,0x19
            });
            var p1  =tlv.Encode();
            tlv.Clear();
            
            tlv.WriteValue(0x2, new byte[]{0xb9,0xe3,0x21,0x9e,0x42,0xee,0x22,0x0a,0xf8,0xe4,0xde,0xd6,0x18,0x1b,
                0x56,0x82,0x47,0x8a,0xa6,0xa9,0x25,0xdf,0x51,0xb6,0xde,0x71,0xcc,0x5d,0x39,
                0xcd,0x14,0x1e,0x10,0x32,0xa5,0x9e,0x4d,0x19,0xa6,0x2d,0x8c,0x71,0xd0,0xed,
                0xc8,0x6e,0x15,0x20,0x36,0x59,0xef,0x8c,0x1a,0xdc,0x96,0x0b,0x52,0x0e,0x48,
                0x45,0x52,0xfa,0x96,0x37,0x2b,0x6a,0xd5,0xa7,0xde,0x25,0xa2,0x55,0x53,0xfa,
                0xf4,0xad,0xef,0x53,0xe7,0x98,0x56,0xa0,0x8d,0xca,0xd8,0xf1,0xbb,0x3e,0x8b,
                0x70,0x06,0x83,0x0e,0x18,0xb5,0x15,0x95,0x24,0xd9,0x10,0x13,0x43,0x89,0xeb,
                0x6e,0xfe,0x61,0xaf,0x75,0x21,0xad,0x5d,0x61,0x1e,0xaf,0x5a,0x86,0x57,0xe4,
                0x94,0xc9,0xd8,0xd7,0x4f,0x44,0xf4,0x29,0x3d,0x67,0x15,0x74,0x9a,0x53,0x0c,
                0x8e,0x64,0x16,0x84,0xe2,0xc0,0x70,0x7f,0x6a,0xb4,0x00,0x90,0xb3,0xaf,0xe1,
                0x0b,0xaf,0xaa,0x1c,0xa7,0x54,0x7d,0x1f,0x12,0x88,0x99,0x24,0x54,0x5a,0x47,
                0xa8,0x83,0x1a,0x10,0x20,0x0c,0xa0,0x7a,0xb0,0x0e,0xd3,0xa9,0xbe,0xb2,0x3c,
                0x9b,0xf4,0x21,0xe8,0x65,0x66,0x82,0xca,0x1b,0xaa,0x2a,0xb5,0xf4,0x21,0xb7,
                0xd0,0xc4,0xe8,0x56,0x25,0xb5,0x00,0xe3,0xf5,0x74,0xdb,0x6d,0xd8,0x4f,0xb1,
                0x75,0xc7,0x72,0x17,0x50,0x06,0xe4,0xfd,0x20,0x45,0xdd,0x49,0xfb,0x39,0x9e,
                0xc8,0x01,0xc2,0x58,0x37,0x87,0xda,0x46,0xfc,0x1a,0x83,0x16,0xd5,0xee,0xf8,
                0x1e,0x76,0x00,0x49,0xee,0x69,0x1f,0xaf,0xfc,0x0b,0xc5,0x90,0xdc,0x48,0x98,
                0xe1,0x2f});
            var p2  =tlv.Encode();

            tlv.Clear();
            
            tlv.WriteValue(0x3, new byte[]{0x11,0x80,0xa0,0x77,0x6b,0x75,0xa6,0x94,0xc0,0x1f,0x40,0xbd,0x04,0x19,0xda,
                0xb9,0xf8,0xa8,0x03,0x42,0x63,0x8f,0x01,0xe0,0x67,0xab,0x36,0x24,0x0b,0xad,
                0x49,0x0c,0x6e,0x93,0xc2,0x2e,0x5e,0x6c,0x92,0x7b,0x65,0x9a,0xbb,0x65,0x70,
                0x54,0x53,0xe9,0x92,0x0e,0xba,0xc2,0xf6,0xd0,0x3c,0x40,0x7e,0xc4,0x0e,0x60,
                0x19,0xdd,0x6f,0x90,0x5a,0x56,0x23,0x5b,0x5a,0xa2,0x85,0xff,0xab,0x9c,0xc6,
                0xdf,0x8e,0x74,0x5b,0x17,0xba,0x58,0xb2,0x11,0x95,0x2c,0xfa,0xc5,0x88,0xf6,
                0x91,0x3c,0xc0,0x55,0xd9,0x64,0xf3,0x45,0xf5,0x49,0x9d,0x44,0xd0,0x66,0x2d,
                0x6d,0x39,0xd9,0x50,0xd5,0x14,0x8e,0x8e,0xb5,0xbb,0x6b,0x42,0xd3,0x7f,0x31,
                0xfd,0xbf,0xbc,0x40,0xc4,0x83,0x3c,0xc8,0x1c,0xd3,0x37,0xd3,0x23,0xda,0x0d,
                0xdd,0xd9,0x66,0x67,0x69,0x1d,0x56,0x56,0x5c,0x71,0x22,0xc5,0xd7,0xc8,0x03,
                0xc4,0x93,0xf4,0x86,0x2a,0xdc,0x92,0x3a,0x8f,0xf1,0xfb,0x8b,0x53,0x7c,0x5f,
                0xb0,0xf8,0xc1,0xb8,0x22,0x64,0x8f,0x56,0x80,0x48,0x04,0x5f,0xfb,0x64,0x50,
                0x19,0xcb,0x90,0xd9,0x97,0xc9,0x9a,0x85,0x1e,0xec,0x78,0x06,0x42,0x96,0x33,
                0x7f,0xa0,0x9a,0x9c,0x72,0xc8,0x39,0x5c,0x1b,0x29,0x3c,0xc7,0xc5,0x23,0xb6,
                0xb2,0x95,0x48,0x91,0x80,0x6f,0x1c,0x00,0xa6,0xed,0xd8,0xe9,0x96,0x0f,0x9c,
                0xa1,0x18,0x4c,0x2b,0xda,0x25,0xf2,0xed,0x91,0x48,0x01,0xcc,0xc9,0xe2,0x3c,
                0x03,0x4f,0x39,0xfa,0x43,0x2d,0x64,0xa0,0x1c,0x58,0xc6,0x3f,0x7c,0x2b,0x81,
                0x39});
            var e1  =tlv.Encode();

            tlv.Clear();
            
            tlv.WriteValue(0x4, new byte[]{0x52,0x06,0x66,0xd4,0x46,0x26,0x7c,0x81,0x28,0xf9,0x1d,0x57,0x8d,0xc5,0xaa,
                0x73,0xcc,0x8b,0xe3,0x24,0xea,0xa0,0x53,0x97,0x85,0x2a,0xe4,0x0a,0x13,0x32,
                0x6a,0x79,0x25,0x9e,0xa3,0xb4,0x69,0xc3,0x32,0xb0,0x10,0xb4,0x3c,0x84,0x60,
                0x98,0x2a,0xdc,0x4e,0xff,0x7a,0x93,0xf1,0x5a,0x7b,0x1f,0x3d,0xb3,0x2d,0xb2,
                0xe1,0x7d,0xd0,0x01,0x42,0x38,0x5f,0x55,0x36,0xd2,0x96,0x82,0x5e,0x8f,0x73,
                0x9e,0xb8,0xe7,0xe6,0x5f,0x33,0x82,0x9f,0x6e,0xee,0x32,0x24,0xf4,0xe1,0x64,
                0xaa,0x8a,0xf4,0x12,0x74,0xfd,0xb4,0x15,0x51,0x6f,0x25,0x80,0xfd,0x00,0x15,
                0xb7,0x4c,0x75,0xb7,0x13,0x08,0x44,0x17,0x52,0x0a,0x00,0xc1,0x1d,0x51,0xb1,
                0x52,0x2c,0x4c,0x3e,0x1f,0x68,0x3a,0x36,0x6d,0x21,0x6b,0x95,0x99,0xa6,0x05,
                0xc3,0x26,0xa8,0xb6,0xc2,0x42,0x22,0x07,0x7c,0xac,0x6f,0x2d,0xcb,0x23,0x5c,
                0x1b,0xc4,0xcd,0xe6,0x0c,0x83,0x35,0xcd,0xe0,0xd6,0xea,0xd0,0x0a,0x12,0x6a,
                0xca,0x87,0x1a,0xac,0x79,0xc5,0xea,0xbd,0x7b,0x9d,0x6c,0xde,0xc8,0x19,0xb4,
                0x9b,0x92,0xc6,0xd0,0xcf,0xde,0x50,0xbe,0xca,0x65,0x14,0x6b,0x48,0xe1,0xaa,
                0xce,0xe8,0xd2,0xf2,0xca,0x9f,0x3c,0xf8,0x17,0xfb,0xa7,0xc9,0xf6,0xc8,0x90,
                0xf7,0x54,0x61,0xf3,0x1f,0x47,0xb6,0x66,0xa2,0x4d,0x96,0x92,0xb4,0x07,0x5b,
                0xac,0x63,0x0c,0xb8,0x5c,0x4b,0x36,0x5d,0x92,0x79,0x5b,0xff,0x44,0xf6,0xd9,
                0xc2,0x2a,0x38,0x75,0x6a,0x8f,0xe0,0x01,0x31,0x54,0x99,0xaa,0x8a,0xa2,0x63,
                0x63});
            var e2  =tlv.Encode();

            tlv.Clear();
            
            tlv.WriteValue(0x4, new byte[]{0x41,0xe6,0x63,0xe5,0x0b,0xa7,0xca,0x0b,0x32,0x81,0x0c,0x23,0xcb,0xc2,0x50,
                0x81,0xdf,0xc3,0xab,0x16,0xfe,0xc2,0x00,0xda,0x46,0x16,0x54,0x68,0x01,0xcf,
                0x09,0x79,0xf4,0xb0,0x37,0x4e,0xd8,0x73,0x98,0x53,0x34,0x1e,0x61,0x17,0xb0,
                0xa4,0xef,0xa7,0xa2,0x24,0xbd,0xaa,0x8b,0x92,0x6c,0x47,0x90,0xb5,0x20,0x13,
                0xd9,0x27,0x4f,0x77,0x8a,0xea,0xeb,0x5c,0x7b,0x29,0xf7,0x07,0x42,0x9c,0x16,
                0xcd,0xbe,0x81,0xfb,0xee,0x2d,0xa5,0x98,0xec,0xdf,0x3c,0x0a,0x7e,0xd3,0x28,
                0x1b,0x5e,0xe2,0x82,0x4c,0x2e,0x50,0x58,0x35,0x7d,0x5e,0x6c,0x7c,0xd3,0x46,
                0x61,0x0e,0xea,0x79,0x8b,0x95,0xa3,0xb4,0x97,0xc4,0x51,0x6a,0x5d,0x94,0x34,
                0x7f,0xf9,0x2c,0x89,0x57,0xa1,0x27,0xb9,0xdb,0xad,0x45,0xa9,0xdf,0xe1,0x42,
                0x0d,0x02,0x86,0xfb,0x96,0x36,0x0d,0x74,0xf7,0x38,0xa2,0xac,0x1f,0x23,0x8b,
                0xf3,0xaa,0xb9,0x49,0x2f,0x89,0xd1,0x04,0x6e,0x19,0xeb,0x19,0xa2,0xc1,0xbe,
                0x2c,0xdb,0xe4,0x6f,0xac,0x06,0x0e,0x30,0x9f,0x0c,0xdc,0xcd,0x83,0x6c,0x07,
                0x28,0x26,0x61,0x9d,0x77,0x26,0x21,0x6a,0xc1,0x15,0x61,0xc7,0x50,0x33,0x20,
                0x43,0xbc,0x1a,0x11,0x76,0xdb,0xc2,0x85,0x26,0xef,0x9e,0xc5,0x05,0x7b,0x7c,
                0x2f,0x37,0xd9,0x28,0xac,0x71,0xc3,0xb3,0x2d,0x04,0xb5,0xfd,0xe7,0x13,0x7e,
                0x91,0x57,0x07,0x0d,0x78,0x5c,0x57,0x77,0xf5,0x8c,0x67,0x73,0x1c,0x6d,0xf7,
                0x20,0xbb,0x31,0x73,0x35,0xca,0x7b,0xe2,0xf2,0xa2,0x39,0x36,0x8c,0x86,0x6c,
                0xbf});
            var co  =tlv.Encode();
            tlv.Clear();
            
            
            
            IYubiKeyDevice testDevice = IntegrationTestDeviceEnumeration.GetTestDevice(testDeviceType);

            Assert.True(testDevice.EnabledUsbCapabilities.HasFlag(YubiKeyCapabilities.Piv));

            using var pivSession = new PivSession(testDevice);
            var collectorObj = new Simple39KeyCollector();
            pivSession.KeyCollector = collectorObj.Simple39KeyCollectorDelegate;

            PivPrivateKey privateKey = SampleKeyPairs.GetPrivateKey(algorithm);
            pivSession.ImportPrivateKey(slotNumber, privateKey);
        }

        [Theory]
        [InlineData(StandardTestDevice.Fw5)]
        public void KeyAndCertImport(StandardTestDevice testDeviceType)
        {
            IYubiKeyDevice testDevice = IntegrationTestDeviceEnumeration.GetTestDevice(testDeviceType);

            Assert.True(testDevice.EnabledUsbCapabilities.HasFlag(YubiKeyCapabilities.Piv));

            using (var pivSession = new PivSession(testDevice))
            {
                bool isValid = PivSupport.ResetPiv(pivSession);
                Assert.True(isValid);

                var collectorObj = new Simple39KeyCollector();
                pivSession.KeyCollector = collectorObj.Simple39KeyCollectorDelegate;

                isValid = SampleKeyPairs.GetMatchingKeyAndCert(
                    out X509Certificate2 cert, out PivPrivateKey privateKey);
                Assert.True(isValid);

                pivSession.ImportPrivateKey(0x90, privateKey);

                pivSession.ImportCertificate(0x90, cert);
            }
        }

        [Theory]
        [InlineData(StandardTestDevice.Fw5)]
        public void CertImport(StandardTestDevice testDeviceType)
        {
            IYubiKeyDevice testDevice = IntegrationTestDeviceEnumeration.GetTestDevice(testDeviceType);
            Assert.True(testDevice.EnabledUsbCapabilities.HasFlag(YubiKeyCapabilities.Piv));

            bool isValid = SampleKeyPairs.GetMatchingKeyAndCert(
                out X509Certificate2 cert, out PivPrivateKey privateKey);
            Assert.True(isValid);

            using (var pivSession = new PivSession(testDevice))
            {
                var collectorObj = new Simple39KeyCollector();
                pivSession.KeyCollector = collectorObj.Simple39KeyCollectorDelegate;

                pivSession.ImportCertificate(0x90, cert);
            }
        }
    }
}
