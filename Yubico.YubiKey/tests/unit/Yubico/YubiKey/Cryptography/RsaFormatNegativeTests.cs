// Copyright 2021 Yubico AB
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Linq;
using System.Security.Cryptography;
using Xunit;
using Yubico.YubiKey.TestUtilities;

namespace Yubico.YubiKey.Cryptography
{
    public class RsaFormatNegativeTests
    {
        [Theory]
        [InlineData(1, 3077)]
        [InlineData(1, 4099)]
        [InlineData(2, 1023)]
        [InlineData(2, 2047)]
        [InlineData(3, 1025)]
        [InlineData(3, 2049)]
        public void Format_WrongKeySize_Exception(int format, int keySize)
        {
            byte[] digest = new byte[] {
                0x01, 0xFF, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            _ = format switch
            {
                1 => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Sign(digest, RsaFormat.Sha256, keySize)),
                2 => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Pss(digest, RsaFormat.Sha256, keySize)),
                3 => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Encrypt(digest, keySize)),
                _ => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Oaep(digest, RsaFormat.Sha256, keySize)),
            };
        }

        [Theory]
        [InlineData(1, 127)]
        [InlineData(1, 255)]
        [InlineData(2, 129)]
        [InlineData(2, 257)]
        [InlineData(3, 384)]
        [InlineData(3, 512)]
        [InlineData(4, 130)]
        [InlineData(4, 254)]
        public void Parse_WrongInputSize_Exception(int format, int bufferSize)
        {
            byte[] buffer = new byte[bufferSize];
            using RandomNumberGenerator random = RandomObjectUtility.GetRandomObject(null);
            random.GetBytes(buffer);

            Span<byte> digest = new Span<byte>(buffer).Slice(4, 20);

#pragma warning disable IDE0018 // VS reports this error, but the suggested change does not compile.
            byte[] outputBuffer;
#pragma warning restore IDE0018 // Inline variable declaration
            int digestAlgorithm = 0;
            bool isVerified = false;
            bool isValid = format switch
            {
                1 => RsaFormat.TryParsePkcs1Verify(buffer, out digestAlgorithm, out outputBuffer),
                2 => RsaFormat.TryParsePkcs1Pss(buffer, digest, RsaFormat.Sha1, out outputBuffer, out isVerified),
                3 => RsaFormat.TryParsePkcs1Decrypt(buffer, out outputBuffer),
                _ => RsaFormat.TryParsePkcs1Oaep(buffer, RsaFormat.Sha1, out outputBuffer),
            };

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
            Assert.Equal(0, digestAlgorithm);
            Assert.False(isVerified);
        }

        [Theory]
        [InlineData(1, 101, 1024)]
        [InlineData(1, 102, 2048)]
        [InlineData(2, 103, 1024)]
        [InlineData(2, 104, 2048)]
        [InlineData(4, 105, 1024)]
        [InlineData(4, 106, 2048)]
        public void Format_WrongDigestAlg_Exception(int format, int digestAlgorithm, int keySize)
        {
            byte[] digest = new byte[] {
                0x01, 0xFF, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            _ = format switch
            {
                1 => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Sign(digest, digestAlgorithm, keySize)),
                2 => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Pss(digest, digestAlgorithm, keySize)),
                _ => Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Oaep(digest, digestAlgorithm, keySize)),
            };
        }

        [Theory]
        [InlineData(2, 101, 128)]
        [InlineData(2, 102, 256)]
        [InlineData(4, 103, 128)]
        [InlineData(4, 104, 256)]
        public void Parse_WrongDigest_Exception(int format, int digestAlgorithm, int bufferSize)
        {
            byte[] buffer = new byte[bufferSize];
            byte[] digest = new byte[20];
            RandomNumberGenerator random = RandomObjectUtility.GetRandomObject(null);
            random.GetBytes(buffer);
            buffer[0] &= 0x7F;
            random.GetBytes(digest);

#pragma warning disable IDE0018 // VS reports this error, but the suggested change does not compile.
            byte[] outputBuffer;
#pragma warning restore IDE0018 // Inline variable declaration
            _ = format switch
            {
                2 => Assert.Throws<ArgumentException>(() => RsaFormat.TryParsePkcs1Pss(buffer, digest, digestAlgorithm, out outputBuffer, out bool isVerified)),
                _ => Assert.Throws<ArgumentException>(() => RsaFormat.TryParsePkcs1Oaep(buffer, digestAlgorithm, out outputBuffer)),
            };
        }

        [Theory]
        [InlineData(RsaFormat.Sha1, 1024)]
        [InlineData(RsaFormat.Sha256, 1024)]
        [InlineData(RsaFormat.Sha384, 1024)]
        [InlineData(RsaFormat.Sha1, 2048)]
        [InlineData(RsaFormat.Sha256, 2048)]
        [InlineData(RsaFormat.Sha384, 2048)]
        [InlineData(RsaFormat.Sha512, 2048)]
        public void FormatP1Sign_WrongDigestLength_Exception(int digestAlgorithm, int keySize)
        {
            byte[] digest = new byte[] {
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40
            };

            int newSize = digestAlgorithm switch
            {
                RsaFormat.Sha1 => 19,
                RsaFormat.Sha256 => 31,
                RsaFormat.Sha384 => 47,
                _ => 63,
            };

            Array.Resize(ref digest, newSize);

            _ = Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Sign(digest, digestAlgorithm, keySize));
        }

        [Theory]
        [InlineData(0x01, 0x01, 0x00)]
        [InlineData(0x00, 0x02, 0x00)]
        [InlineData(0x00, 0x01, 0x01)]
        public void ParseP1Sign_WrongMarkerBytes_ReturnFalse(byte leadByte, byte algByte, byte separator)
        {
            byte[] formattedData = new byte[] {
                0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x30, 0x31, 0x30,
                0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            formattedData[0] = leadByte;
            formattedData[1] = algByte;
            formattedData[76] = separator;

            bool isValid = RsaFormat.TryParsePkcs1Verify(formattedData, out int digestAlgorithm, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
            Assert.Equal(0, digestAlgorithm);
        }

        [Fact]
        public void ParseP1Sign_SevenPadBytes_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x30, 0x75, 0x30, 0x0d, 0x06, 0x09,
                0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x63, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x01, 0x02, 0x03,
                0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13,
                0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x11, 0x22, 0x33
            };

            bool isValid = RsaFormat.TryParsePkcs1Verify(formattedData, out int digestAlgorithm, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
            Assert.Equal(0, digestAlgorithm);
        }

        [Fact]
        public void ParseP1Sign_AllPadBytes_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            };

            bool isValid = RsaFormat.TryParsePkcs1Verify(formattedData, out int digestAlgorithm, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
            Assert.Equal(0, digestAlgorithm);
        }

        [Theory]
        [InlineData(0x61, true)]
        [InlineData(0x01, false)]
        public void ParseP1Sign_WrongDigestInfo_ReturnFalse(byte oidByte, bool nullParams)
        {
            byte[] formattedData = new byte[] {
                0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x30, 0x31, 0x30,
                0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            formattedData[91] = oidByte;
            int expectedAlgorithm = 0;
            if (nullParams == false)
            {
                formattedData[80] = 0x0E;
                formattedData[93] = 0x01;
                formattedData[95] = 0x04;
                formattedData[96] = 0x1F;
                expectedAlgorithm = RsaFormat.Sha256;
            }

            bool isValid = RsaFormat.TryParsePkcs1Verify(formattedData, out int digestAlgorithm, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Equal(0x20, outputBuffer[^1]);
            Assert.Equal(expectedAlgorithm, digestAlgorithm);
        }

        [Fact]
        public void FormatPss_InvalidPS_Exception()
        {
            byte[] digest = new byte[] {
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
                0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
                0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40
            };

            _ = Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Pss(digest, RsaFormat.Sha512, RsaFormat.KeySizeBits1024));
        }

        [Fact]
        public void ParsePss_WrongMSBit_ReturnFalse()
        {
            byte[] digest = new byte[] {
                0x01, 0xff, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };
            byte[] formattedData = new byte[] {
                0x64, 0x92, 0xd1, 0x38, 0x24, 0x8a, 0x78, 0xe5, 0x64, 0x68, 0x92, 0xe7, 0x13, 0xc6, 0x81, 0xa0,
                0xe9, 0xeb, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x40,
                0x5a, 0xa7, 0x94, 0xde, 0x68, 0x1b, 0xaa, 0x8b, 0x58, 0x95, 0x04, 0x22, 0xd6, 0xfc, 0x3f, 0xbc
            };

            formattedData[0] = 0xe4;

            bool isValid = RsaFormat.TryParsePkcs1Pss(formattedData, digest, RsaFormat.Sha256, out byte[] mPrimePlus, out bool isVerified);

            Assert.False(isValid);
            Assert.Empty(mPrimePlus);
            Assert.False(isVerified);
        }

        [Fact]
        public void ParsePss_WrongTrail_ReturnFalse()
        {
            byte[] digest = new byte[] {
                0x01, 0xff, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };
            byte[] formattedData = new byte[] {
                0x64, 0x92, 0xd1, 0x38, 0x24, 0x8a, 0x78, 0xe5, 0x64, 0x68, 0x92, 0xe7, 0x13, 0xc6, 0x81, 0xa0,
                0xe9, 0xeb, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x40,
                0x5a, 0xa7, 0x94, 0xde, 0x68, 0x1b, 0xaa, 0x8b, 0x58, 0x95, 0x04, 0x22, 0xd6, 0xfc, 0x3f, 0xbc
            };

            formattedData[^1] = 0xcc;

            bool isValid = RsaFormat.TryParsePkcs1Pss(formattedData, digest, RsaFormat.Sha256, out byte[] mPrimePlus, out bool isVerified);

            Assert.False(isValid);
            Assert.Empty(mPrimePlus);
            Assert.False(isVerified);
        }

        [Fact]
        public void ParsePss_WrongPSLength_ReturnFalse()
        {
            byte[] digest = new byte[] {
                0x01, 0xff, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };
            byte[] formattedData = new byte[] {
                0x64, 0x92, 0xd1, 0x38, 0x24, 0x8a, 0x78, 0xe5, 0x64, 0x68, 0x92, 0xe7, 0x13, 0xc6, 0x81, 0xa0,
                0xe9, 0xeb, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x40,
                0x5a, 0xa7, 0x94, 0xde, 0x68, 0x1b, 0xaa, 0x8b, 0x58, 0x95, 0x04, 0x22, 0xd6, 0xfc, 0x3f, 0xbc
            };

            formattedData[8] = 0x65;

            bool isValid = RsaFormat.TryParsePkcs1Pss(formattedData, digest, RsaFormat.Sha256, out byte[] mPrimePlus, out bool isVerified);

            Assert.False(isValid);
            Assert.Empty(mPrimePlus);
            Assert.False(isVerified);
        }

        [Fact]
        public void ParsePss_WrongSeparator_ReturnFalse()
        {
            byte[] digest = new byte[] {
                0x01, 0xff, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };
            byte[] formattedData = new byte[] {
                0x64, 0x92, 0xd1, 0x38, 0x24, 0x8a, 0x78, 0xe5, 0x64, 0x68, 0x92, 0xe7, 0x13, 0xc6, 0x81, 0xa0,
                0xe9, 0xeb, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x40,
                0x5a, 0xa7, 0x94, 0xde, 0x68, 0x1b, 0xaa, 0x8b, 0x58, 0x95, 0x04, 0x22, 0xd6, 0xfc, 0x3f, 0xbc
            };

            formattedData[62] = 0xcc;

            bool isValid = RsaFormat.TryParsePkcs1Pss(formattedData, digest, RsaFormat.Sha256, out byte[] mPrimePlus, out bool isVerified);

            Assert.False(isValid);
            Assert.Empty(mPrimePlus);
            Assert.False(isVerified);
        }

        [Fact]
        public void ParsePss_WrongDigest_IsVerifiedFalse()
        {
            byte[] digest = new byte[] {
                0x01, 0xff, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };
            byte[] formattedData = new byte[] {
                0x64, 0x92, 0xd1, 0x38, 0x24, 0x8a, 0x78, 0xe5, 0x64, 0x68, 0x92, 0xe7, 0x13, 0xc6, 0x81, 0xa0,
                0xe9, 0xeb, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x40,
                0x5a, 0xa7, 0x94, 0xde, 0x68, 0x1b, 0xaa, 0x8b, 0x58, 0x95, 0x04, 0x22, 0xd6, 0xfc, 0x3f, 0xbc
            };

            digest[^1] = 0x21;
            bool isValid = RsaFormat.TryParsePkcs1Pss(formattedData, digest, RsaFormat.Sha256, out _, out bool isVerified);

            Assert.True(isValid);
            Assert.False(isVerified);
        }

        [Theory]
        [InlineData(1024)]
        [InlineData(2048)]
        public void Format_P15Encrypt_TooMuchData_Exception(int keySize)
        {
            int dataLength = 118;
            if (keySize == 2048)
            {
                dataLength = 246;
            }

            byte[] buffer = new byte[dataLength];
            using RandomNumberGenerator random = RandomObjectUtility.GetRandomObject(null);
            random.GetBytes(buffer);

            _ = Assert.Throws<ArgumentException>(() => RsaFormat.FormatPkcs1Encrypt(buffer, keySize));
        }

        [Theory]
        [InlineData(0x01, 0x02)]
        [InlineData(0x00, 0x01)]
        public void ParseP1Decrypt_WrongMarkerBytes_ReturnFalse(byte leadByte, byte algByte)
        {
            byte[] formattedData = new byte[] {
                0x00, 0x02, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x00,
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            formattedData[0] = leadByte;
            formattedData[1] = algByte;

            bool isValid = RsaFormat.TryParsePkcs1Decrypt(formattedData, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
        }

        [Fact]
        public void ParseP1Decrypt_NotEnoughPad_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0x02, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x00,
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            formattedData[8] = 0;

            bool isValid = RsaFormat.TryParsePkcs1Decrypt(formattedData, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
        }

        [Fact]
        public void ParseP1Decrypt_NoSeparator_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0x02, 0x43, 0x8f, 0x54, 0x76, 0x55, 0x84, 0x16, 0x3e, 0x47, 0x76, 0x31, 0x6a, 0xc2, 0x7d,
                0x27, 0x0f, 0x6c, 0x4f, 0xd5, 0x17, 0x52, 0xea, 0x3e, 0xce, 0xe5, 0xd6, 0x5c, 0x09, 0xac, 0xc2,
                0xb1, 0xea, 0xbb, 0x5f, 0x05, 0x16, 0x9f, 0x2e, 0x05, 0x20, 0x3a, 0x28, 0x90, 0x76, 0xcf, 0x72,
                0xea, 0x15, 0x7e, 0x8a, 0x5a, 0x05, 0x0f, 0xc0, 0x80, 0x54, 0x18, 0x2f, 0x8f, 0xbb, 0xf1, 0xcf,
                0x1a, 0xe9, 0xe6, 0x82, 0x4d, 0xef, 0xdb, 0x52, 0xff, 0x7a, 0xd4, 0x3c, 0x7d, 0xd1, 0x21, 0x53,
                0xbd, 0x2c, 0x74, 0x25, 0xe0, 0x36, 0xcc, 0x79, 0x85, 0x7e, 0x52, 0x85, 0xae, 0xd5, 0xf7, 0x00,
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
                0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
            };

            formattedData[95] = 0x01;

            bool isValid = RsaFormat.TryParsePkcs1Decrypt(formattedData, out byte[] outputBuffer);

            Assert.False(isValid);
            Assert.Empty(outputBuffer);
        }

        [Fact]
        public void ParseOaep_WrongDigest_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0xaf, 0x3d, 0x2d, 0x62, 0xe4, 0xb6, 0xd0, 0xa4, 0x8d, 0xf8, 0xad, 0xee, 0x6d, 0xa9, 0x13,
                0xa2, 0x7b, 0x67, 0xd3, 0x65, 0x4e, 0x2c, 0x8a, 0x1a, 0x9d, 0x4b, 0xed, 0x95, 0x80, 0x69, 0x8d,
                0xb1, 0xb9, 0x87, 0xce, 0xaa, 0xa6, 0x86, 0x58, 0x39, 0x55, 0xa8, 0x1b, 0x54, 0x9d, 0xf4, 0x8a,
                0xdc, 0x25, 0x3d, 0x8e, 0x99, 0x1f, 0xeb, 0x87, 0x4c, 0xa0, 0x89, 0xfe, 0xb8, 0xf8, 0x3f, 0xa2,
                0x54, 0x31, 0x3e, 0xe7, 0x39, 0x82, 0x9f, 0x2b, 0xb5, 0x48, 0x20, 0xd5, 0xe5, 0x54, 0x56, 0x74,
                0xf9, 0x01, 0xb0, 0xfc, 0x97, 0x8f, 0x91, 0xd7, 0x57, 0x80, 0x32, 0x87, 0xeb, 0xd1, 0xb7, 0x77,
                0xd2, 0x79, 0x03, 0x25, 0xb6, 0xe4, 0x7e, 0xad, 0x17, 0xa2, 0x84, 0xcc, 0x71, 0xcc, 0x5d, 0xd1,
                0x1c, 0x2c, 0x9c, 0x0f, 0x3c, 0xc2, 0xdd, 0xaa, 0x94, 0xc9, 0x56, 0x1f, 0x95, 0xb5, 0x6c, 0x20
            };

            bool isValid = RsaFormat.TryParsePkcs1Oaep(formattedData, RsaFormat.Sha512, out byte[] outputData);

            Assert.False(isValid);
            Assert.Empty(outputData);
        }

        [Fact]
        public void ParseOaep_WrongLeadByte_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0xaf, 0x3d, 0x2d, 0x62, 0xe4, 0xb6, 0xd0, 0xa4, 0x8d, 0xf8, 0xad, 0xee, 0x6d, 0xa9, 0x13,
                0xa2, 0x7b, 0x67, 0xd3, 0x65, 0x4e, 0x2c, 0x8a, 0x1a, 0x9d, 0x4b, 0xed, 0x95, 0x80, 0x69, 0x8d,
                0xb1, 0xb9, 0x87, 0xce, 0xaa, 0xa6, 0x86, 0x58, 0x39, 0x55, 0xa8, 0x1b, 0x54, 0x9d, 0xf4, 0x8a,
                0xdc, 0x25, 0x3d, 0x8e, 0x99, 0x1f, 0xeb, 0x87, 0x4c, 0xa0, 0x89, 0xfe, 0xb8, 0xf8, 0x3f, 0xa2,
                0x54, 0x31, 0x3e, 0xe7, 0x39, 0x82, 0x9f, 0x2b, 0xb5, 0x48, 0x20, 0xd5, 0xe5, 0x54, 0x56, 0x74,
                0xf9, 0x01, 0xb0, 0xfc, 0x97, 0x8f, 0x91, 0xd7, 0x57, 0x80, 0x32, 0x87, 0xeb, 0xd1, 0xb7, 0x77,
                0xd2, 0x79, 0x03, 0x25, 0xb6, 0xe4, 0x7e, 0xad, 0x17, 0xa2, 0x84, 0xcc, 0x71, 0xcc, 0x5d, 0xd1,
                0x1c, 0x2c, 0x9c, 0x0f, 0x3c, 0xc2, 0xdd, 0xaa, 0x94, 0xc9, 0x56, 0x1f, 0x95, 0xb5, 0x6c, 0x20
            };

            formattedData[0] = 0x01;

            bool isValid = RsaFormat.TryParsePkcs1Oaep(formattedData, RsaFormat.Sha256, out byte[] outputData);

            Assert.False(isValid);
            Assert.Empty(outputData);
        }

        [Fact]
        public void ParseOaep_WrongData_ReturnFalse()
        {
            byte[] formattedData = new byte[] {
                0x00, 0xaf, 0x3d, 0x2d, 0x62, 0xe4, 0xb6, 0xd0, 0xa4, 0x8d, 0xf8, 0xad, 0xee, 0x6d, 0xa9, 0x13,
                0xa2, 0x7b, 0x67, 0xd3, 0x65, 0x4e, 0x2c, 0x8a, 0x1a, 0x9d, 0x4b, 0xed, 0x95, 0x80, 0x69, 0x8d,
                0xb1, 0xb9, 0x87, 0xce, 0xaa, 0xa6, 0x86, 0x58, 0x39, 0x55, 0xa8, 0x1b, 0x54, 0x9d, 0xf4, 0x8a,
                0xdc, 0x25, 0x3d, 0x8e, 0x99, 0x1f, 0xeb, 0x87, 0x4c, 0xa0, 0x89, 0xfe, 0xb8, 0xf8, 0x3f, 0xa2,
                0x54, 0x31, 0x3e, 0xe7, 0x39, 0x82, 0x9f, 0x2b, 0xb5, 0x48, 0x20, 0xd5, 0xe5, 0x54, 0x56, 0x74,
                0xf9, 0x01, 0xb0, 0xfc, 0x97, 0x8f, 0x91, 0xd7, 0x57, 0x80, 0x32, 0x87, 0xeb, 0xd1, 0xb7, 0x77,
                0xd2, 0x79, 0x03, 0x25, 0xb6, 0xe4, 0x7e, 0xad, 0x17, 0xa2, 0x84, 0xcc, 0x71, 0xcc, 0x5d, 0xd1,
                0x1c, 0x2c, 0x9c, 0x0f, 0x3c, 0xc2, 0xdd, 0xaa, 0x94, 0xc9, 0x56, 0x1f, 0x95, 0xb5, 0x6c, 0x20
            };

            formattedData[^1] = 0x21;

            bool isValid = RsaFormat.TryParsePkcs1Oaep(formattedData, RsaFormat.Sha256, out byte[] outputData);

            Assert.False(isValid);
            Assert.Empty(outputData);
        }
    }
}
